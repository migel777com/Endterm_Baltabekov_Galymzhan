// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CalcServiceClient is the client API for CalcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CalcServiceClient interface {
	PrimeDecomposition(ctx context.Context, in *PrimeDecomposeRequest, opts ...grpc.CallOption) (CalcService_PrimeDecompositionClient, error)
	AverageCalculator(ctx context.Context, opts ...grpc.CallOption) (CalcService_AverageCalculatorClient, error)
}

type calcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCalcServiceClient(cc grpc.ClientConnInterface) CalcServiceClient {
	return &calcServiceClient{cc}
}

func (c *calcServiceClient) PrimeDecomposition(ctx context.Context, in *PrimeDecomposeRequest, opts ...grpc.CallOption) (CalcService_PrimeDecompositionClient, error) {
	stream, err := c.cc.NewStream(ctx, &CalcService_ServiceDesc.Streams[0], "/proto.CalcService/PrimeDecomposition", opts...)
	if err != nil {
		return nil, err
	}
	x := &calcServicePrimeDecompositionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CalcService_PrimeDecompositionClient interface {
	Recv() (*PrimeDecomposeResponse, error)
	grpc.ClientStream
}

type calcServicePrimeDecompositionClient struct {
	grpc.ClientStream
}

func (x *calcServicePrimeDecompositionClient) Recv() (*PrimeDecomposeResponse, error) {
	m := new(PrimeDecomposeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *calcServiceClient) AverageCalculator(ctx context.Context, opts ...grpc.CallOption) (CalcService_AverageCalculatorClient, error) {
	stream, err := c.cc.NewStream(ctx, &CalcService_ServiceDesc.Streams[1], "/proto.CalcService/AverageCalculator", opts...)
	if err != nil {
		return nil, err
	}
	x := &calcServiceAverageCalculatorClient{stream}
	return x, nil
}

type CalcService_AverageCalculatorClient interface {
	Send(*AverageRequest) error
	CloseAndRecv() (*AverageRespond, error)
	grpc.ClientStream
}

type calcServiceAverageCalculatorClient struct {
	grpc.ClientStream
}

func (x *calcServiceAverageCalculatorClient) Send(m *AverageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *calcServiceAverageCalculatorClient) CloseAndRecv() (*AverageRespond, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(AverageRespond)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CalcServiceServer is the server API for CalcService service.
// All implementations must embed UnimplementedCalcServiceServer
// for forward compatibility
type CalcServiceServer interface {
	PrimeDecomposition(*PrimeDecomposeRequest, CalcService_PrimeDecompositionServer) error
	AverageCalculator(CalcService_AverageCalculatorServer) error
	mustEmbedUnimplementedCalcServiceServer()
}

// UnimplementedCalcServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCalcServiceServer struct {
}

func (UnimplementedCalcServiceServer) PrimeDecomposition(*PrimeDecomposeRequest, CalcService_PrimeDecompositionServer) error {
	return status.Errorf(codes.Unimplemented, "method PrimeDecomposition not implemented")
}
func (UnimplementedCalcServiceServer) AverageCalculator(CalcService_AverageCalculatorServer) error {
	return status.Errorf(codes.Unimplemented, "method AverageCalculator not implemented")
}
func (UnimplementedCalcServiceServer) mustEmbedUnimplementedCalcServiceServer() {}

// UnsafeCalcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CalcServiceServer will
// result in compilation errors.
type UnsafeCalcServiceServer interface {
	mustEmbedUnimplementedCalcServiceServer()
}

func RegisterCalcServiceServer(s grpc.ServiceRegistrar, srv CalcServiceServer) {
	s.RegisterService(&CalcService_ServiceDesc, srv)
}

func _CalcService_PrimeDecomposition_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PrimeDecomposeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CalcServiceServer).PrimeDecomposition(m, &calcServicePrimeDecompositionServer{stream})
}

type CalcService_PrimeDecompositionServer interface {
	Send(*PrimeDecomposeResponse) error
	grpc.ServerStream
}

type calcServicePrimeDecompositionServer struct {
	grpc.ServerStream
}

func (x *calcServicePrimeDecompositionServer) Send(m *PrimeDecomposeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CalcService_AverageCalculator_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CalcServiceServer).AverageCalculator(&calcServiceAverageCalculatorServer{stream})
}

type CalcService_AverageCalculatorServer interface {
	SendAndClose(*AverageRespond) error
	Recv() (*AverageRequest, error)
	grpc.ServerStream
}

type calcServiceAverageCalculatorServer struct {
	grpc.ServerStream
}

func (x *calcServiceAverageCalculatorServer) SendAndClose(m *AverageRespond) error {
	return x.ServerStream.SendMsg(m)
}

func (x *calcServiceAverageCalculatorServer) Recv() (*AverageRequest, error) {
	m := new(AverageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CalcService_ServiceDesc is the grpc.ServiceDesc for CalcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CalcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.CalcService",
	HandlerType: (*CalcServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PrimeDecomposition",
			Handler:       _CalcService_PrimeDecomposition_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AverageCalculator",
			Handler:       _CalcService_AverageCalculator_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/calc.proto",
}
